import { Component, OnInit } from '@angular/core';
import { TripData } from '../trip.model';
import { TripService } from '../trip-api.service';
import { Router, ActivatedRoute } from '@angular/router';
import { FormControl } from '@angular/forms';

@Component({
  selector: 'app-trip-list',
  templateUrl: './trip-list.component.html',
  styleUrls: ['./trip-list.component.css']
})
export class TripListComponent implements OnInit {

  tripList: TripData[] = [];
  filteredTripList: TripData[] = [];
  sortingControl = new FormControl();
  searchControl = new FormControl();
  constructor(
    private route: ActivatedRoute,
    private tripService: TripService,
    private router: Router
  ) { }

  ngOnInit(): void {
    //const tripId = this.route.snapshot.params['id'];
    // const tripId = this.route.snapshot.paramMap.get('id');
    // if(tripId){
    this.getTrips();

    // }

    this.get("");
    this.sortingControl.valueChanges.subscribe((value) => {
      if (value) {
        let sortResult = this.doSorting(value);
        this.get(sortResult.sort);
      }
    });
    this.doSorting("");

  }

  getTrips(): void {
    this.tripService.getTrips().subscribe(
      (trips) => {
        this.tripList = trips;
        this.filteredTripList = this.tripList;

      },
      (error) => {
        console.error('Failed to retrieve trip list:', error);
        // Handle error scenario, such as displaying an error message
      }
    );
  }

  searchTripResults(text: string) {
    if (!text.trim()) {
      this.filteredTripList = this.tripList;
    } else {
      this.filteredTripList = this.tripList.filter(
        (tripData) =>
          tripData?.title.toLowerCase().includes(text.toLowerCase()) ||
          tripData?.description.toLowerCase().includes(text.toLowerCase())
      );
    }
  }

  get(sort: string) {
    //this.tripService.get(sort)
     // .subscribe((trips) => {
      //  this.tripList = trips;

      //})
  }

  doSearch() {
    let sorting = this.doSorting(this.sortingControl.value ?? "");
    this.get(sorting.sort);

  }


  doSorting(value: string) {
    let sort: string = '';


    if (value.toLowerCase() === 'title-desc') {
      sort = 'title';

    } else if (value.toLowerCase() === 'title-asc') {
      sort = '-title';

    } else if (value.toLowerCase() === 'date-desc') {
      sort = 'createdAt';

    } else if (value.toLowerCase() === 'date-asc') {
      sort = '-createdAt';

    }

    if (value.toLowerCase() === 'traveler-desc') {
      sort = 'user.name';

    } else if (value.toLowerCase() === 'traveler-asc') {
      sort = '-user.name';

    }

    return {
      sort,


    }


  }



}


<div class=" ">
  <form>
    <input type="text" placeholder="search trip" #filter>
<button class="primary" type="button" (click)="searchTripResults(filter.value)">Search</button>
  </form>
  <div>
    <select class="form-select form-select-sm w-25 mb-2" aria-label="Large select example"
        [formControl]="sortingControl">
        <option selected>Sort by</option>
        <option value="title-desc">Trip Title (Descending)</option>
        <option value="title-asc">Trip Title (Ascending)</option>
         <option value="date-desc">Trip Date (Descending)</option>
        <option value="date-asc">Trip Date (Ascending)</option>
        <option value="traveler-desc">Traveler (Descending)</option>
        <option value="traveler-asc">Traveler (Ascending)</option>
    </select>
    <div class="input-group mb-3 w-50">
      
      <input type="text" class="form-control" placeholder="Searching" [formControl]="searchControl ">
      <button  matSuffix mat-icon-button aria-label="Clear"  (click)="searchTripResults(filter.value)">
        <mat-icon>search</mat-icon>
      </button>
    </div>
    <mat-form-field class="example-form-field">
      <mat-label>Searching </mat-label>
      <input matInput type="text" #filter >
      <button  matSuffix mat-icon-button aria-label="Clear"  (click)="searchTripResults(filter.value)" >
        <mat-icon>search</mat-icon>
      </button>
    </mat-form-field>
    
</div>

    <app-trip
      *ngFor="let trip of filteredTripList"
      [tripData]="trip">
    </app-trip>
  </div>

 
