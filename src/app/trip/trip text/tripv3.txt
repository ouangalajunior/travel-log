service
getV3(sort: string, page: number, pageSize: number, search?: string, title?: string): Observable<HttpResponse<TripData[]>> {
  let url = `${environment.apiUrl}/trips?page=${page}&pageSize=${pageSize}`;

  if (sort) {
    url += `&sort=${sort}`;
  }

  if (search) {
    url += `&search=${search}`;
  }

  if (title) {
    url += `&title=${title}`;
  }

  return this.http.get<TripData[]>(url, { observe: 'response' });
}


html
<div>
    <mat-form-field>
      <input matInput [formControl]="searchControl" placeholder="Search">
    </mat-form-field>
    
    <mat-form-field>
      <mat-label>Sorting</mat-label>
      <mat-select [formControl]="sortingControl">
        <mat-option value="">-Select-</mat-option>
        <mat-option value="title">Trip Title (Ascending)</mat-option>
        <mat-option value="-title">Trip Title (Descending)</mat-option>
        <mat-option value="createdAt">Trip Date (Ascending)</mat-option>
        <mat-option value="-createdAt">Trip Date (Descending)</mat-option>
      </mat-select>
    </mat-form-field>
  </div>
  
  <mat-paginator [length]="paginator ? paginator.length : 0" [pageSize]="pageSize" [pageSizeOptions]="[5, 10, 25, 50]"
                 (page)="onPageChange($event)">
  </mat-paginator>
  
  <div class="">
    <app-trip *ngFor="let tripData of tripList" [tripData]="tripData"></app-trip>
  </div>


  component

  import { Component, OnInit, ViewChild } from '@angular/core';
import { TripData } from '../trip.model';
import { TripService } from '../trip-api.service';
import { FormControl } from '@angular/forms';
import { MatPaginator, PageEvent } from '@angular/material/paginator';

@Component({
  selector: 'app-trip-list-v3',
  templateUrl: './trip-list-v3.component.html',
  styleUrls: ['./trip-list-v3.component.css']
})
export class TripListV3Component implements OnInit {

  tripList: TripData[] = [];
  sortingControl = new FormControl();
  searchControl = new FormControl();

  currentPage: number = 1;
  pageSize: number = 5;
  sortValue: string = '';
  searchValue: string = '';
  titleValue: string = '';

  @ViewChild(MatPaginator) paginator: MatPaginator | undefined;

  constructor(private tripService: TripService) { }

  ngOnInit(): void {
    this.sortingControl.valueChanges.subscribe((value) => {
      this.sortValue = value;
      this.getTrips();
    });
    this.searchControl.valueChanges.subscribe((searchValue) => {
      this.searchValue = searchValue;
      this.getTrips();
    });
     // Initial call to get the trip list without any search or sorting
  this.getTrips();
  }

  getTrips(): void {
    this.tripService.getV3(this.sortValue, this.currentPage, this.pageSize, this.searchValue, this.titleValue)
      .subscribe((response) => {
        this.tripList = response.body || [];

        // Update the paginator length based on the total count
        if (this.paginator) {
          this.paginator.length = parseInt(response.headers.get('Pagination-Total') || '0', 10);
        }
      });
  }

  onPageChange(e: PageEvent) {
    this.currentPage = e.pageIndex + 1;
    this.pageSize = e.pageSize;
    this.getTrips();
  }
}

  